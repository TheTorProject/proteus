// Code generated by go-bindata.
// sources:
// proteus-registry/data/migrations/1_accounts_create.sql
// proteus-registry/data/migrations/1_active_probes_create.sql
// proteus-registry/data/migrations/1_probe_updates_create.sql
// proteus-registry/data/migrations/2_add_language_column.sql
// proteus-registry/data/templates/home.tmpl
// DO NOT EDIT!

package registry

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataMigrations1_accounts_createSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xc1\x8e\xda\x30\x10\xbd\xfb\x2b\xde\x01\x29\xa0\xee\x1e\x7a\x8e\x7a\x30\xc9\x50\xac\x26\x0e\x75\x9c\xee\xd2\x4b\x64\x25\x16\x6b\x09\x4c\x84\x4d\x77\xf7\xef\x2b\x42\xa9\x36\x52\xcb\x6d\xfc\xe6\xcd\x9b\x79\x4f\x7e\x7c\xc4\xa7\x83\xdb\x9d\x4c\xb4\xc8\x8f\xaf\x9e\x7d\x04\xea\x68\xa2\x3d\x58\x1f\x97\x76\xe7\x3c\xcb\x55\xb5\x81\xe6\xcb\x82\x20\x56\xb0\x6f\x2e\xc4\x00\xd3\x75\xc7\xb3\x8f\x21\xfd\xf7\x24\xf9\x9e\x4d\x3a\xcd\x70\x77\x45\x85\xd9\x8c\x01\xc0\x92\xbe\x0a\x39\x56\x62\x05\x59\x69\xd0\xb3\xa8\x75\x8d\x79\x4d\x05\x65\x1a\x9f\xb1\x52\x55\x89\x61\xd7\xc6\xf7\xc1\xe2\x69\x4d\x8a\x10\xdf\x07\x6f\x0e\x16\x5f\x90\xfc\xb9\xab\x3d\x1d\xf7\x36\x59\x40\xaf\xe9\xaa\x96\x29\xe2\x9a\xa0\xb7\x1b\x02\xcf\xb2\xaa\x91\xba\x55\x55\x41\xe0\x35\x48\x36\x25\xe6\x49\x6f\x7f\xb9\xce\x26\x0f\x48\x4c\x7f\x70\xfe\x52\x9c\x83\x3d\x25\x8b\x74\x54\x20\x99\x43\xac\x52\x46\x32\x9f\xcd\x52\xc6\x6e\x8a\xb7\x60\x3e\x1c\x7b\x0b\x87\xcd\xc7\x49\xd7\xa3\x26\x25\x78\x81\x8d\x12\x25\x57\x5b\x7c\xa3\xed\xc8\x97\x4d\x51\x3c\x8c\x9c\xcb\xa6\xd1\xc3\x0f\xae\xb2\x35\x57\x57\x74\x30\x21\xbc\x1e\x4f\x7d\xfb\x62\xc2\xcb\xb4\x15\xcc\x3e\x4e\x91\xbd\x09\xb1\x35\x5d\x67\x43\x80\x16\x25\xd5\x9a\x97\x1b\x3c\x09\xbd\x1e\x9f\xf8\x59\x49\xba\x32\x2f\xe1\x4c\x52\x60\x8b\xf4\xe6\xa7\x91\xe2\x7b\x43\x10\x32\xa7\xe7\xff\xd8\x6a\x5d\xdf\x9e\x9d\xef\xed\x1b\x2a\xf9\x17\xc5\xdc\xf5\x8b\x3b\xdf\xe1\x77\x00\x00\x00\xff\xff\x49\x92\xd5\x50\x73\x02\x00\x00")

func dataMigrations1_accounts_createSqlBytes() ([]byte, error) {
	return bindataRead(
		_dataMigrations1_accounts_createSql,
		"data/migrations/1_accounts_create.sql",
	)
}

func dataMigrations1_accounts_createSql() (*asset, error) {
	bytes, err := dataMigrations1_accounts_createSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/migrations/1_accounts_create.sql", size: 627, mode: os.FileMode(420), modTime: time.Unix(1500894646, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataMigrations1_active_probes_createSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xcf\x8e\xd3\x30\x10\x87\xef\x7e\x8a\x39\xb6\x82\x95\x16\x38\xf6\x94\xdd\x18\xad\x45\x9b\x94\xfc\x81\x2d\x08\x59\x6e\x3c\x2d\x56\x13\x3b\xb2\xa7\x0d\x7d\x7b\xa4\x84\x94\xa6\xea\x1e\x67\xbe\xf9\xc6\xb2\x7f\x7e\x78\x80\x77\x8d\xd9\x7b\x45\x08\xb1\xeb\x2c\x8b\xb3\x74\x0d\x45\xf4\xb4\xe4\x20\x3e\x03\x7f\x15\x79\x91\x83\xaa\xc8\x9c\x50\xb6\xde\x6d\x31\x2c\x18\xbb\xb6\xca\x76\x52\xe6\xa4\x08\x1b\xb4\xf4\x84\x7b\x63\xd9\x73\xc6\xa3\x82\xff\x5f\x98\xa4\xc5\xdd\xa5\x6c\xc6\x00\x00\x8c\x86\xb2\x14\x31\xac\x33\xb1\x8a\xb2\x0d\x7c\xe1\x9b\x5e\x49\xca\xe5\xf2\x7d\x3f\x51\x79\x54\x64\x9c\x95\x64\x1a\x84\x42\xac\x78\x5e\x44\xab\x35\x7c\x17\xc5\x4b\x5f\xc2\x8f\x34\xe1\xc3\x6c\xbf\x5a\x56\x15\x7c\x8b\xb2\xe7\x97\x28\x9b\x7d\x9c\x5f\x03\x15\xec\x85\x7c\x7a\x1c\x51\xad\x68\xe7\x7c\x33\x92\xa1\x1b\xdc\x8e\x3a\xe5\x51\x5a\xd5\xe0\x45\xfa\xf0\x38\x5a\x17\x7e\x42\x1f\x8c\xb3\x37\xf6\xb1\x6d\x9d\x27\xd4\x92\x30\x50\x18\xe1\xcf\x5f\x03\xb6\x48\x9d\xf3\x07\x49\xe7\x16\xa7\xa2\x3a\x29\x53\xab\x6d\x8d\x72\xab\xac\xee\x8c\xa6\xdf\xd3\x01\x72\x07\xbc\x39\x6c\xb8\xdb\x4e\x35\xa6\x3e\xdf\x23\x46\x4f\xbb\xb5\x0a\x24\x8f\xad\x56\x84\xfa\xcd\xf7\x64\xf3\xc5\x18\x65\x99\x88\xaf\x25\x07\x91\xc4\xfc\xf5\x26\x51\x8f\x7b\x13\x08\x3d\xea\x7f\xa9\x4a\xa3\xe5\xd1\x58\x8d\x7f\x20\x4d\xa6\x81\xc3\xcc\xe8\xf9\xe2\xfe\xd7\xe1\x56\xb3\xbf\x01\x00\x00\xff\xff\x64\x48\x47\x43\x99\x02\x00\x00")

func dataMigrations1_active_probes_createSqlBytes() ([]byte, error) {
	return bindataRead(
		_dataMigrations1_active_probes_createSql,
		"data/migrations/1_active_probes_create.sql",
	)
}

func dataMigrations1_active_probes_createSql() (*asset, error) {
	bytes, err := dataMigrations1_active_probes_createSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/migrations/1_active_probes_create.sql", size: 665, mode: os.FileMode(420), modTime: time.Unix(1500894638, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataMigrations1_probe_updates_createSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xcf\x6e\xc2\x30\x0c\x87\xef\x79\x0a\x1f\x41\x1b\x12\xdb\x8e\x9c\x0a\x64\xa2\x1a\xff\xd4\xa6\xdb\xd8\x34\x45\x81\x18\x16\xd1\x26\x55\x6a\xa8\x78\xfb\x49\x74\x65\x94\xf5\x68\x7f\xbf\xcf\x56\xe2\x5e\x0f\xee\x32\xb3\xf3\x8a\x10\xc6\xae\xb4\x6c\x1c\x2d\x96\x20\x82\xe1\x94\x43\xf8\x0c\xfc\x3d\x8c\x45\x0c\xb9\x77\x6b\x94\x87\x5c\x2b\xc2\x62\xc0\xd8\xb5\x95\xe4\x8d\x32\x26\x45\x98\xa1\xa5\x21\xee\x8c\x65\xa3\x88\x07\x82\xff\x0d\x9c\x2f\x44\xeb\x50\xd6\x61\x00\x00\x46\x43\x92\x84\x63\x58\x46\xe1\x2c\x88\x56\xf0\xc2\x57\x67\x65\x9e\x4c\xa7\xf7\xe7\x44\x95\x97\x64\x32\x04\x11\xce\x78\x2c\x82\xd9\x12\xde\x42\x31\x39\x97\xf0\xb1\x98\xf3\x2a\x59\xcd\xdf\x6c\xe0\x35\x88\x46\x93\x20\xea\x3c\x76\xaf\x81\x2a\xec\x85\x3c\xf5\x6b\x94\x2a\xda\x3a\x9f\xd5\xa4\xea\x16\x6e\x4b\xa5\xf2\x28\xad\xca\xf0\x22\x3d\xf4\x6b\xeb\xc2\x8f\xe8\x0b\xe3\xec\x8d\x7d\xc8\x73\xe7\x09\xb5\x24\x2c\xa8\xa8\xe1\xe7\x57\x85\x2d\x52\xe9\xfc\x5e\xd2\x29\xc7\xa6\xa8\x8e\xca\xa4\x6a\x9d\xa2\x5c\x2b\xab\x4b\xa3\xe9\xbb\x19\x20\xb7\xc7\x9b\x65\xd5\xdb\xb6\x2a\x33\xe9\xa9\x8d\x18\xdd\xec\xd6\xdf\xf9\x6f\xf9\x26\x35\x68\x49\xfe\x1e\x84\x75\x07\xed\x57\xe6\x56\xb3\x9f\x00\x00\x00\xff\xff\xaf\x10\xdb\xee\x44\x02\x00\x00")

func dataMigrations1_probe_updates_createSqlBytes() ([]byte, error) {
	return bindataRead(
		_dataMigrations1_probe_updates_createSql,
		"data/migrations/1_probe_updates_create.sql",
	)
}

func dataMigrations1_probe_updates_createSql() (*asset, error) {
	bytes, err := dataMigrations1_probe_updates_createSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/migrations/1_probe_updates_create.sql", size: 580, mode: os.FileMode(420), modTime: time.Unix(1495831185, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataMigrations2_add_language_columnSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x92\x4f\x4f\x83\x30\x18\xc6\xef\x7c\x8a\xe7\x40\x32\x8d\x99\x37\x4f\x3b\x75\xb4\xba\x26\x08\x0b\x74\xba\x1b\x54\x68\x48\x13\x28\x04\x8a\x7f\xbe\xbd\x19\x2a\x59\xa3\x5b\x8c\x27\x7b\x7a\xff\xe4\x79\xdf\xdf\x93\xbe\xcb\x25\xae\x1a\x5d\xf5\xd2\x2a\xd0\xf6\xc5\x78\xc7\x85\xd4\x4a\xab\x1a\x65\xec\x5a\x55\xda\x78\x24\x14\x2c\x81\x20\xeb\x90\x41\x16\x56\x3f\xab\xac\xeb\xdb\x27\x35\x80\x26\xf1\x16\x41\x1c\xee\xee\x23\xf0\x5b\xb0\x3d\x4f\x45\x8a\x5a\x9a\x2a\x2b\xda\x52\xad\x1c\xe9\xa4\xc9\xc6\xae\x94\xf6\x37\xd2\x1f\x81\x98\x29\x3d\xa7\xb3\xeb\xce\x91\xd3\x18\xbe\xef\x01\xc0\x9a\xdd\xf1\x68\x8a\xbe\x67\x87\x77\xda\x23\xa1\xf4\x8b\x73\xa6\xc3\x03\x49\x82\x0d\x49\x2e\x6e\x2e\x57\xf3\x18\xb6\x0f\xd8\x56\xf0\xd8\x1d\xfc\xb8\x61\x11\xca\xb1\xab\x75\x21\xad\xca\x8a\xb6\x1e\x1b\x03\x71\xa8\x26\x84\xa7\x0c\x51\x2c\x78\xc0\xb0\xf8\xec\xe4\xf3\x92\x1c\xb2\xee\x95\x2c\xdf\xa0\x5e\xf5\x60\x07\x68\x83\xdc\x61\xcb\xaf\x17\x47\xeb\x23\xfa\x91\x4c\x81\xef\xff\xd1\xbc\xfb\x4b\xff\xcb\xbc\xc3\x76\xde\xfc\xe9\xf3\x79\x0f\x00\x00\xff\xff\x78\x76\x6d\x68\xfa\x02\x00\x00")

func dataMigrations2_add_language_columnSqlBytes() ([]byte, error) {
	return bindataRead(
		_dataMigrations2_add_language_columnSql,
		"data/migrations/2_add_language_column.sql",
	)
}

func dataMigrations2_add_language_columnSql() (*asset, error) {
	bytes, err := dataMigrations2_add_language_columnSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/migrations/2_add_language_column.sql", size: 762, mode: os.FileMode(420), modTime: time.Unix(1500894621, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTemplatesHomeTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\xc1\x72\xdb\x36\x10\x3d\x4b\x5f\xb1\x45\x6e\x1d\xd1\x94\xd2\xa6\xb5\x69\x8a\x87\x38\xcd\xc4\x87\xc6\x9e\x3a\x39\xf4\xb8\x24\x96\x24\x1a\x10\x8b\x01\x56\xb2\x94\x4c\xff\xbd\x03\x52\x62\x34\xee\x4c\x7b\xe2\xee\xc3\xc3\xbe\x47\x2c\x16\xe5\x0f\xef\x1e\xee\x3e\xfd\xf9\xf8\x1b\xf4\x32\xd8\x6a\x59\xa6\x0f\x58\x74\xdd\x56\x91\x53\xd5\x12\xa0\xec\x09\xf5\x18\x0c\x24\x08\x4d\x8f\x21\x92\x6c\xd5\x4e\xda\xec\x5a\x7d\x5f\x70\x38\xd0\x56\xed\x0d\x3d\x7b\x0e\xa2\xa0\x61\x27\xe4\x64\xab\x9e\x8d\x96\x7e\xab\x69\x6f\x1a\xca\xc6\x64\x05\xc6\x19\x31\x68\xb3\xd8\xa0\xa5\xed\x46\x55\xcb\x54\x47\x8c\x58\xaa\x1e\x03\x0b\xed\x22\x64\xc0\xec\x8c\x0f\x5c\x13\x70\x68\x7a\x8a\x12\x50\x0c\x3b\x88\xc7\x28\x34\x94\xf9\xc4\x5f\x2e\xca\x28\x47\x4b\x20\x47\x4f\x5b\x25\x74\x90\xbc\x89\x51\x55\xcb\xc5\x8f\xf0\x6d\xb9\x58\x0c\x18\x3a\xe3\x0a\x58\xdf\x2e\x17\x0b\x8f\x5a\x1b\xd7\x9d\xb2\x44\xce\x02\x39\x4d\x61\x04\x3b\xe2\x81\x24\x98\xe6\x31\x50\x63\xa2\x61\x97\x58\x35\x1f\xb2\x68\xbe\x8e\x8c\x9a\x83\xa6\x90\xd5\x7c\xb8\x5d\x2e\xfe\x5e\x2e\x6a\xd6\xc7\xd5\x78\x7a\xa3\x56\xcb\x4e\xb2\x16\x07\x63\x8f\x05\x64\xe8\xbd\xa5\x6c\xb2\xbb\x82\xb7\xd6\xb8\x2f\xbf\x63\xf3\x34\xe6\xef\xd9\xc9\x0a\xd4\x13\x75\x4c\xf0\xf9\x5e\xad\x40\xfd\xc1\x35\x0b\xa7\xe8\xe1\x70\xec\xc8\xa5\xe8\x73\xbd\x73\xb2\x4b\xd1\x1d\x3a\xc1\x40\xd6\xa6\xe4\xbd\x09\x08\x4f\xe8\x62\x4a\xde\x05\x36\x7a\xce\x3e\x90\xdd\x93\x98\x06\xe1\x23\xed\x48\xad\x20\xa2\x8b\x59\xa4\x60\xda\xd1\x32\x00\x40\x72\x0d\xdf\xc6\x10\xa0\xc6\xe6\x4b\x17\x78\xe7\x74\x01\xaf\xda\xb6\xbd\x3d\xe1\xf3\x51\xfd\xb4\xf6\x87\x09\x9c\x76\x0f\x68\xdc\xbc\x7b\xc0\xc3\xd4\xd5\x02\x6e\x5e\xbf\x20\x5e\xf5\x64\x2d\x5f\x50\x53\x23\xb2\x9a\x45\x78\xb8\x2c\x0b\x30\x9e\x5b\x34\x5f\xa9\x80\xcd\xf5\x0b\xf8\x99\x4c\xd7\x4b\x01\xaf\xd7\xeb\x33\x6e\x8d\xa3\xac\x3f\xe1\x2f\xed\xcd\xba\xfd\x66\x96\xbe\xa8\xff\x2f\xd9\x73\xfd\x37\xdf\xeb\x9f\x9c\x0a\xfb\xf1\xa2\x4c\x60\xc3\x96\x43\x01\xaf\xd6\x3f\xff\xf2\xeb\xcd\xcd\xa5\x22\xce\x3a\x33\xe7\xcd\xf5\xf5\xdd\xdb\xf3\xce\xf1\x9a\x69\x6a\x78\xba\xc0\x05\x38\x76\x74\x2e\xb0\x28\xf3\xf1\xfe\x8e\xa3\x94\xcf\xd3\x96\x5a\x54\x8d\x94\x32\x9d\x77\x75\x2a\x55\x6a\xb3\x87\xc6\x62\x8c\x5b\x35\xfe\xa5\x3a\xaf\xa4\x51\xdd\x54\x1f\x12\xb6\x02\xe9\x4d\x04\x13\xc1\x4f\xc3\x94\x05\xea\x4c\x94\x70\x2c\xf3\x7e\x73\xb1\xc1\x57\x1e\x83\x00\xb7\x20\x3d\xfd\xef\xbc\xf9\xd9\x44\xae\xcd\x7e\x4e\x66\xf8\x1e\x70\x80\x1e\xbd\x3f\x82\x30\x44\x0a\x7b\x82\x1e\x9d\xb6\x04\x68\x2d\xb4\x3b\xd7\xa4\x7a\x68\x8d\x1c\x21\x90\x45\x21\x9d\x98\x27\x73\x93\x18\xb7\x30\x7a\x88\x2b\xd8\x79\x8d\x62\x5c\x37\x63\x90\x5e\x1a\x8d\x82\x80\x4e\x83\xe5\xce\xb8\xab\xd9\x92\xbf\x30\xf4\x89\xc1\x12\x06\x07\x03\x07\x02\xac\x79\x27\xf0\xf0\xf0\xf1\x1e\xf6\x26\x1a\x29\xa0\x44\xe8\x03\xb5\x5b\xd5\x8b\xf8\x58\xe4\x79\xfa\xf5\x2b\xe1\xe0\x03\xff\x45\x8d\x5c\x71\xe8\x72\x55\xfd\xd7\x6a\x99\x63\x35\x8b\x96\xf9\xb9\x47\x65\x3e\x35\xae\xcc\xa7\x17\xf5\x9f\x00\x00\x00\xff\xff\x58\x2c\x75\x8f\x62\x05\x00\x00")

func dataTemplatesHomeTmplBytes() ([]byte, error) {
	return bindataRead(
		_dataTemplatesHomeTmpl,
		"data/templates/home.tmpl",
	)
}

func dataTemplatesHomeTmpl() (*asset, error) {
	bytes, err := dataTemplatesHomeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/templates/home.tmpl", size: 1378, mode: os.FileMode(420), modTime: time.Unix(1495831185, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/migrations/1_accounts_create.sql": dataMigrations1_accounts_createSql,
	"data/migrations/1_active_probes_create.sql": dataMigrations1_active_probes_createSql,
	"data/migrations/1_probe_updates_create.sql": dataMigrations1_probe_updates_createSql,
	"data/migrations/2_add_language_column.sql": dataMigrations2_add_language_columnSql,
	"data/templates/home.tmpl": dataTemplatesHomeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"1_accounts_create.sql": &bintree{dataMigrations1_accounts_createSql, map[string]*bintree{}},
			"1_active_probes_create.sql": &bintree{dataMigrations1_active_probes_createSql, map[string]*bintree{}},
			"1_probe_updates_create.sql": &bintree{dataMigrations1_probe_updates_createSql, map[string]*bintree{}},
			"2_add_language_column.sql": &bintree{dataMigrations2_add_language_columnSql, map[string]*bintree{}},
		}},
		"templates": &bintree{nil, map[string]*bintree{
			"home.tmpl": &bintree{dataTemplatesHomeTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

