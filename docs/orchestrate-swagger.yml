swagger: '2.0'
schemes:
  - http
  - https
host: orchestrate.ooni.io
basePath: /api/v1
info:
  description: |
    This is an the OpenAPI spec for proteus orchestrate
  version: '2.0.0'
produces:
  - application/json
paths:
  # These are admin endpoints
  /admin/job/{job_id}:
    delete:
      responses:
        '200':
          description: 'OK'
          examples:
            'application/json': 'Hello world!'
          schema:
            type: string
  /admin/job:
    post:
      responses:
        '200':
          description: 'OK'
          examples:
            'application/json': 'Hello world!'
          schema:
            type: string
  /admin/jobs:
    get:
      responses:
        '200':
          description: 'OK'
          examples:
            'application/json': 'Hello world!'
          schema:
            type: string


  # These are operations related to getting tasks to run in unattended
  # orchestration mode
  /tasks:
    get:
      responses:
        '200':
          description: 'OK'
          examples:
            'application/json': 'Hello world!'
          schema:
            type: string
  /task/{task_id}/accept:
    post:
      responses:
        '200':
          description: 'OK'
          examples:
            'application/json': 'Hello world!'
          schema:
            type: string
  /task/{task_id}/done:
    post:
      responses:
        '200':
          description: 'OK'
          examples:
            'application/json': 'Hello world!'
          schema:
            type: string
  /task/{task_id}/reject:
    post:
      responses:
        '200':
          description: 'OK'
          examples:
            'application/json': 'Hello world!'
          schema:
            type: string

  /task/{task_id}:
    summary: Echo test
    description: Receive the exact message you've sent
    get:
      responses:
        '200':
          description: 'OK'
          examples:
            'application/json': 'Hello world!'
          schema:
            type: string

  /urls:
    get:
      parameters:
        - name: limit
          in: query
          type: integer
          description: How many URLs to return
        - name: country_code
          in: query
          type: string
          description: The two letter country code
        - name: category_code
          in: query
          type: array
          collectionFormat: csv
          items:
            type: string
          description: |
            The list of category codes to return URLs for. If not specified, will
            return urls of ANY category code.
      responses:
        '200':
          description: |
            Returns the list of URLs for the specified query
          schema:
            $ref: "#/definitions/URLs"

  /test-helpers:
    get:
      parameters:
        - name: name
          type: array
          collectionFormat: csv
          items:
            type: string
          description: |
            The list of test helpers we should return addresses for.
      responses:
        '200':
          description: |
            Returns the list of test helpers
          schema:
            $ref: "#/definitions/TestHelpers"


  /collectors:
    get:
      parameters:
        - name: type
          type: array
          collectionFormat: csv
          items:
            type: string
            enum:
              - onion
              - domain_fronted
              - https
          description: |
            The list of test helpers we should return addresses for.
      responses:
        '200':
          description: |
            Returns the list of collectors
          schema:
            $ref: "#/definitions/Collectors"

definitions:
  Collector:
    properties:
      type:
        type: string
        enum:
          - onion
          - domain_fronted
          - https
        address:
          type: string

  UrlInput:
    properties:
      category_code:
        type: string
        description: 'The citizenlab category code'
      country_code:
        type: string
        description: 'The two letter country code (XX means GLOBAL)'
      address:
        type: string
        description: 'The Url to test'

  TestHelpers:
    type: object
    description: List of requested test helpers
    properties:
      metadata:
        type: object
      results:
        type: array
        items:
          type: object
    example:
      metadata:
        count: 10
        current_page: 1
        limit: 100
        offset: 0
        pages: 1
        next_url: https://orchestrate.ooni.io/api/v1/test-helpers?offset=100&limit=100
      results:
        - name: some-name
          type: https
          address: https://foo.comz

  URLs:
    type: object
    properties:
      metadata:
        type: object
      results:
        type: array
        items:
          description: List of inputs to test
          $ref: '#/definitions/UrlInput'
    example:
      metadata:
        count: 10
        current_page: 1
        limit: 100
        offset: 0
        pages: 1
        next_url: https://orchestrate.ooni.io/api/v1/urls?offset=100&limit=100

      items:
        - category_code: 'SRCH'
          country_code: 'IT'
          url: https://google.com
        - category_code: 'SRCH'
          country_code: 'IT'
          url: https://facebook.com
        - category_code: 'ALDR'
          country_code: 'XX'
          url: https://google.com

  Collectors:
    type: object
    description: List of collectors to submit measurements
    properties:
      metadata:
        type: object
      results:
        type: array
        items:
          $ref: '#/definitions/Collector'
    example:
      metadata:
        count: 10
        current_page: 1
        limit: 100
        offset: 0
        pages: 1
        next_url: https://orchestrate.ooni.io/api/v1/collectors?offset=100&limit=100
      items:
        - type: onion
          address: http://example.onion
        - type: https
          address: https://example.com
        - type: domain_fronted
          address: example.com@cdn.aws.com
        - type: domain_fronted
          address: example2.com@cdn2.google.com
